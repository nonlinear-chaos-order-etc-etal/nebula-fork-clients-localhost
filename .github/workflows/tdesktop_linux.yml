# script to build https://github.com/telegramdesktop/tdesktop/commit/dc8abc74ed4d72a73315550b91283ff1f2e44199 patched by Nebula patches
# https://github.com/telegramdesktop/tdesktop/blob/dc8abc74ed4d72a73315550b91283ff1f2e44199/docs/building-cmake.md

#

name: tdesktop_linux.

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:

  linux:
    name: Ubuntu 14.04
    runs-on: ubuntu-latest
    container: ubuntu:trusty

    strategy:
      matrix:
        defines:
          - ""

    env:
      GIT: "https://github.com"
      QT: "5_6_2"
      QT_PREFIX: "/usr/local/desktop-app/Qt-5.6.2"
      OPENSSL_VER: "1_0_1-stable"
      OPENSSL_PREFIX: "/usr/local/desktop-app/openssl-1_0_1-stable"
      CMAKE_VER: "3"
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      MANUAL_CACHING: "6"
      DOC_PATH: "docs/building-cmake.md"
      AUTO_CACHING: "1"
      DEBUG_YML: "true"

    steps:
      - name: Get repository name.
        run: |
            echo ::set-env name=CURRENT_REPO_NAME::${GITHUB_REPOSITORY##*/}
            echo ::set-env name=REPO_TDESKTOP_NAME::tdesktop
            

      - name: Disable man for further package installs.
        run: |
          cfgFile="/etc/dpkg/dpkg.cfg.d/no_man"
          sudo touch $cfgFile
          p() {
            sudo echo "path-exclude=/usr/share/$1/*" >> $cfgFile
          }

          p man
          p locale
          p doc

      - name: First set up.
        shell: bash
        run: |
            function goto
            {
                label=$1
                cmd=$(sed -n "/$label label/{:a;n;p;ba};" $0 | grep -v ' label$')
                eval "$cmd"
                exit
            }
            
            echo "pwd: `pwd`"
            cd ..
            echo ::set-env name=HomePath::`pwd`
            mkdir -pv Libraries
            cd Libraries
            echo ::set-env name=LibrariesPath::`pwd`
            cd ..

            goto label2
            
            label2 label
            
            sudo apt-get install -y software-properties-common aptitude
            sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
            sudo add-apt-repository -y ppa:george-edison55/cmake-3.x
            sudo apt-get update
            sudo apt-get install -y gcc-7 g++-7 cmake
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 60
            sudo add-apt-repository --remove ppa:ubuntu-toolchain-r/test
            sudo add-apt-repository --remove ppa:george-edison55/cmake-3.x
            sudo aptitude install -y git libexif-dev liblzma-dev libz-dev libssl-dev libappindicator-dev \
            libunity-dev libicu-dev libdee-dev libdrm-dev dh-autoreconf autoconf automake build-essential \
            libass-dev libfreetype6-dev libgpac-dev libsdl1.2-dev libtheora-dev libtool libva-dev libvdpau-dev \
            libvorbis-dev libxcb1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-xfixes0-dev libxcb-keysyms1-dev \
            libxcb-icccm4-dev libxcb-render-util0-dev libxcb-util0-dev libxrender-dev libasound-dev libpulse-dev \
            libxcb-sync0-dev libxcb-randr0-dev libx11-xcb-dev libffi-dev libncurses5-dev pkg-config texi2html \
            zlib1g-dev yasm cmake xutils-dev bison python-xcbgen

            echo ::set-env name=MAKE_THREADS_CNT::-j$(nproc)

            echo "pwd: `pwd`"
            git clone --recursive https://github.com/nebula-chat-fork-originals/tdesktop.git 
            cd tdesktop
            echo "checking out tdesktop commit for Nebula patches"
            git checkout dc8abc74ed4d72a73315550b91283ff1f2e44199
            git reset --hard
            cd ..

            cd Libraries

            git clone https://github.com/ericniebler/range-v3
            cd range-v3
            git checkout a2bf5d0596dd2ffc75c2623b62d6226915609622
            cd ..

            git clone https://github.com/telegramdesktop/zlib.git
            cd zlib
            ./configure
            make $MAKE_THREADS_CNT
            sudo make install
            cd ..

            git clone https://github.com/xiph/opus
            cd opus
            git checkout v1.2.1
            ./autogen.sh
            ./configure
            make $MAKE_THREADS_CNT
            sudo make install
            cd ..

            git clone https://github.com/01org/libva.git
            cd libva
            ./autogen.sh --enable-static
            make $MAKE_THREADS_CNT
            sudo make install
            cd ..

            git clone git://anongit.freedesktop.org/vdpau/libvdpau
            cd libvdpau
            git checkout a21bf7aa438f5dd40d0a300a3167aa3d6f26dccc
            ./autogen.sh --enable-static
            make $MAKE_THREADS_CNT
            sudo make install
            cd ..

            git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg
            cd ffmpeg
            git checkout release/3.4

            ./configure --prefix=/usr/local --disable-programs --disable-doc --disable-everything --enable-protocol=file --enable-libopus --enable-decoder=aac --enable-decoder=aac_latm --enable-decoder=aasc --enable-decoder=flac --enable-decoder=gif --enable-decoder=h264 --enable-decoder=h264_vdpau --enable-decoder=mp1 --enable-decoder=mp1float --enable-decoder=mp2 --enable-decoder=mp2float --enable-decoder=mp3 --enable-decoder=mp3adu --enable-decoder=mp3adufloat --enable-decoder=mp3float --enable-decoder=mp3on4 --enable-decoder=mp3on4float --enable-decoder=mpeg4 --enable-decoder=mpeg4_vdpau --enable-decoder=msmpeg4v2 --enable-decoder=msmpeg4v3 --enable-decoder=opus --enable-decoder=pcm_alaw --enable-decoder=pcm_alaw_at --enable-decoder=pcm_f32be --enable-decoder=pcm_f32le --enable-decoder=pcm_f64be --enable-decoder=pcm_f64le --enable-decoder=pcm_lxf --enable-decoder=pcm_mulaw --enable-decoder=pcm_mulaw_at --enable-decoder=pcm_s16be --enable-decoder=pcm_s16be_planar --enable-decoder=pcm_s16le --enable-decoder=pcm_s16le_planar --enable-decoder=pcm_s24be --enable-decoder=pcm_s24daud --enable-decoder=pcm_s24le --enable-decoder=pcm_s24le_planar --enable-decoder=pcm_s32be --enable-decoder=pcm_s32le --enable-decoder=pcm_s32le_planar --enable-decoder=pcm_s64be --enable-decoder=pcm_s64le --enable-decoder=pcm_s8 --enable-decoder=pcm_s8_planar --enable-decoder=pcm_u16be --enable-decoder=pcm_u16le --enable-decoder=pcm_u24be --enable-decoder=pcm_u24le --enable-decoder=pcm_u32be --enable-decoder=pcm_u32le --enable-decoder=pcm_u8 --enable-decoder=pcm_zork --enable-decoder=vorbis --enable-decoder=wavpack --enable-decoder=wmalossless --enable-decoder=wmapro --enable-decoder=wmav1 --enable-decoder=wmav2 --enable-decoder=wmavoice --enable-encoder=libopus --enable-hwaccel=h264_vaapi --enable-hwaccel=h264_vdpau --enable-hwaccel=mpeg4_vaapi --enable-hwaccel=mpeg4_vdpau --enable-parser=aac --enable-parser=aac_latm --enable-parser=flac --enable-parser=h264 --enable-parser=mpeg4video --enable-parser=mpegaudio --enable-parser=opus --enable-parser=vorbis --enable-demuxer=aac --enable-demuxer=flac --enable-demuxer=gif --enable-demuxer=h264 --enable-demuxer=mov --enable-demuxer=mp3 --enable-demuxer=ogg --enable-demuxer=wav --enable-muxer=ogg --enable-muxer=opus

            make $MAKE_THREADS_CNT
            sudo make install
            cd ..

            git clone https://git.assembla.com/portaudio.git
            cd portaudio
            git checkout 396fe4b669
            ./configure
            make $MAKE_THREADS_CNT
            sudo make install
            cd ..

            git clone git://repo.or.cz/openal-soft.git
            cd openal-soft
            git checkout openal-soft-1.19.1
            cd build
            if [ `uname -p` == "i686" ]; then
            cmake -D LIBTYPE:STRING=STATIC -D ALSOFT_UTILS:BOOL=OFF ..
            else
            cmake -D LIBTYPE:STRING=STATIC ..
            fi
            make $MAKE_THREADS_CNT
            sudo make install
            cd ../..

            git clone https://github.com/openssl/openssl
            cd openssl
            git checkout OpenSSL_1_0_1-stable
            ./config
            make $MAKE_THREADS_CNT
            sudo make install
            cd ..

            git clone https://github.com/xkbcommon/libxkbcommon.git
            cd libxkbcommon
            git checkout 293c704cbedd95779351a7295683159e93e12de7
            ./autogen.sh --disable-x11
            make $MAKE_THREADS_CNT
            sudo make install
            cd ..

            git clone git://code.qt.io/qt/qt5.git qt5_6_2
            cd qt5_6_2
            perl init-repository --module-subset=qtbase,qtimageformats
            git checkout v5.6.2
            cd qtimageformats && git checkout v5.6.2 && cd ..
            cd qtbase && git checkout v5.6.2 && cd ..
            cd qtbase && git apply ../../../tdesktop/Telegram/Patches/qtbase_5_6_2.diff && cd ..
            cd qtbase/src/plugins/platforminputcontexts
            git clone https://github.com/telegramdesktop/fcitx.git
            git clone https://github.com/telegramdesktop/hime.git
            cd ../../../..

            ./configure -prefix "/usr/local/tdesktop/Qt-5.6.2" -release -force-debug-info -opensource -confirm-license -qt-zlib -qt-libpng -qt-libjpeg -qt-freetype -qt-harfbuzz -qt-pcre -qt-xcb -qt-xkbcommon-x11 -no-opengl -no-gtkstyle -static -openssl-linked -nomake examples -nomake tests

            make $MAKE_THREADS_CNT
            sudo make install
            cd ..

            git clone https://chromium.googlesource.com/external/gyp
            cd gyp
            git checkout 702ac58e47
            git apply ../../tdesktop/Telegram/Patches/gyp.diff
            cd ..

            git clone https://chromium.googlesource.com/breakpad/breakpad
            cd breakpad
            git checkout bc8fb886
            git clone https://chromium.googlesource.com/linux-syscall-support src/third_party/lss
            cd src/third_party/lss
            git checkout a91633d1
            cd ../../..
            ./configure
            make $MAKE_THREADS_CNT
            sudo make install
            cd src
            rm -r testing
            git clone https://github.com/google/googletest testing
            cd tools
            echo "old tools.gyp: [`cat tools.gyp`]"
            sed -i "s/gypi...$/gypi'],'cxxflags':['-std=c++11'],/" tools.gyp 
            echo "new tools.gyp: [`cat tools.gyp`]"
            sed -i 's/minidump_upload.m/minidump_upload.cc/' linux/tools_linux.gypi
            ../../../gyp/gyp  --depth=. --generator-output=.. -Goutput_dir=../out tools.gyp --format=cmake
            cd ../../out/Default
            echo "gcc --version: `gcc --version|head -1`"
            cmake .
            make $MAKE_THREADS_CNT dump_syms
            cd ../../..

            echo "gcc --version: `gcc --version|head -1`"
            echo "cmake --version: `cmake --version`"
            
            gcc --version > CACHE_KEY.txt
            echo $MANUAL_CACHING >> CACHE_KEY.txt
            if [ "$AUTO_CACHING" == "1" ]; then
                thisFile=.github/workflows/tdesktop_linux.yml
                echo `md5sum $thisFile | cut -c -32` >> CACHE_KEY.txt
            fi
            md5cache=$(md5sum CACHE_KEY.txt | cut -c -32)
            echo ::set-env name=CACHE_KEY::$md5cache
            
            echo done
      - name: Telegram Desktop build.
        if: env.ONLY_CACHE == 'false'
        shell: bash
        run: |
            function goto
            {
                label=$1
                cmd=$(sed -n "/$label label/{:a;n;p;ba};" $0 | grep -v ' label$')
                eval "$cmd"
                exit
            }
            
            goto label3
            
            label3 label
            
            echo "starting"

            cd $LibrariesPath
            git clone $GIT/nonlinear-chaos-order-etc-etal/nebula-fork-clients-localhost nebula-clients
 
            echo "ls -lha $LibrariesPath/nebula-clients/tdesktop"
            ls -lha $LibrariesPath/nebula-clients/tdesktop

            cd $HomePath/tdesktop/
            git submodule init
            git submodule sync
            git submodule update
            
            echo "patching"

            git apply $LibrariesPath/nebula-clients/tdesktop/config.h.diff
            git apply $LibrariesPath/nebula-clients/tdesktop/dc_options.cpp.diff
            git apply $LibrariesPath/nebula-clients/tdesktop/launcher_linux.cpp.diff
            git apply $LibrariesPath/nebula-clients/tdesktop/launcher_mac.mm.diff
            git apply $LibrariesPath/nebula-clients/tdesktop/launcher_win.cpp.diff
            git apply $LibrariesPath/nebula-clients/tdesktop/telegram_mac.gypi.diff
            git apply $LibrariesPath/nebula-clients/tdesktop/update_checker.cpp.diff

            echo "patched"
            
            echo "grep NEBULA Telegram/SourceFiles/config.h|wc -l: `grep NEBULA Telegram/SourceFiles/config.h|wc -l`"

            cd $HomePath/tdesktop/Telegram

            # test credentials specified at tdesktop/Telegram/gyp/generate.py
            # Test credentials are documented with:
            # "Your users will start getting internal server errors on login
            # if you deploy an app using those 'api_id' and 'api_hash'."
            gyp/refresh.sh --api-id 17349 --api-hash 344583e45741c457fe1862106095a5eb

            DEFINE=""
            if [ -n "${{ matrix.defines }}" ]; then
                DEFINE="-D ${{ matrix.defines }}=ON"
                echo Define from matrix: $DEFINE
            fi

            echo "building tdesktop"
            cd $HomePath/tdesktop/out/Debug
            make $MAKE_THREADS_CNT
            echo "built ok"

            #./configure.sh -D TDESKTOP_API_TEST=ON -D DESKTOP_APP_USE_PACKAGED=OFF $DEFINE

            cd $HomePath/tdesktop/out/Debug/
            #make -j$(nproc)
            echo "strip -s Telegram"
            strip -s Telegram
            
            #mkdir -pv $HomePath/tdesktop/out/Debug/
            #cd $HomePath/tdesktop/out/Debug/
            #echo 123 > Telegram

      - name: Check.
        if: env.ONLY_CACHE == 'false'
        run: |
          cd $HomePath/tdesktop/out/Debug/
          echo "pwd: `pwd`"
          #echo "ls -lhRa"
          #ls -lhRa
          filePath="Telegram"
          if test -f "$filePath"; then
            echo "Build successfully done! :)"

            size=$(stat -c %s "$filePath")
            echo "File size of ${filePath}: ${size} Bytes."
          else
            echo "Build error, output file does not exist."
            exit 1
          fi

      - name: Move artifact.
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          cd $HomePath/tdesktop/out/Debug/
          
          # https://github.com/actions/upload-artifact/issues/43#issuecomment-572258312
          mkdir $GITHUB_WORKSPACE/artifact
          mv -v Telegram $GITHUB_WORKSPACE/artifact/
      - uses: actions/upload-artifact@master
        if: env.UPLOAD_ARTIFACT == 'true'
        name: Upload artifact.
        with:
          name: NebulaForkDesktopLinuxLocalhost
          path: artifact
